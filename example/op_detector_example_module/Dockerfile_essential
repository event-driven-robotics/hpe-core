
# base image
FROM nvidia/cuda:10.2-cudnn7-runtime-ubuntu18.04
# FROM ubuntu

ENV DEBIAN_FRONTEND noninteractive

# install dependencies
RUN apt-get update && \
apt-get install -y --no-install-recommends apt-utils \
python3-dev python3-pip git g++ wget make

# install utils
RUN apt-get install -y unzip nano

# replace cmake, as old version has CUDA variable bugs
RUN wget https://github.com/Kitware/CMake/releases/download/v3.16.0/cmake-3.16.0-Linux-x86_64.tar.gz && \
tar xzf cmake-3.16.0-Linux-x86_64.tar.gz -C /opt && \
rm cmake-3.16.0-Linux-x86_64.tar.gz
ENV PATH="/opt/cmake-3.16.0-Linux-x86_64/bin:${PATH}"


######################
# set github ssh keys #
#######################

ARG ssh_prv_key
ARG ssh_pub_key

RUN apt-get update && \
apt-get install -y openssh-client git
RUN apt-get install -y \
    libmysqlclient-dev \
    ffmpeg libsm6 libxext6

# Authorize SSH Host
RUN mkdir -p /root/.ssh && \
    chmod 0700 /root/.ssh
RUN ssh-keyscan github.com > /root/.ssh/known_hosts

# Add the keys and set permissions
RUN echo "$ssh_prv_key" > /root/.ssh/id_ed25519 && \
    echo "$ssh_pub_key" > /root/.ssh/id_ed25519.pub && \
    chmod 600 /root/.ssh/id_ed25519 && \
    chmod 600 /root/.ssh/id_ed25519.pub


############
#   YARP   #
############

#ARG YARP_VERSION=3.4.4
#ARG YCM_VERSION=0.12.1
ARG YARP_VERSION=3.5.0
ARG YCM_VERSION=0.13.0
ARG BUILD_TYPE=Release
ARG SOURCE_FOLDER=/usr/local
ARG OPENGL=0

RUN apt update

RUN apt install -y \
    apt-transport-https \
    ca-certificates \
    gnupg \
    software-properties-common \
    lsb-core

# Install useful packages
RUN apt install -y \
        build-essential \
        libssl-dev

# Install yarp dependencies
RUN apt install -y \
        libgsl-dev \
        libedit-dev \
        libace-dev \
        libeigen3-dev \
# Install QT5 for GUIS
# (NOTE: may be not compatible with nvidia drivers when forwarding screen)
        qtbase5-dev \
        qt5-default \
        qtdeclarative5-dev \
        qtmultimedia5-dev \
        qml-module-qtquick2 \
        qml-module-qtquick-window2 \
        qml-module-qtmultimedia \
        qml-module-qtquick-dialogs \
        qml-module-qtquick-controls


# install YCM
RUN cd $SOURCE_FOLDER && \
    git clone https://github.com/robotology/ycm.git && \
    cd ycm && \
    git checkout v$YCM_VERSION && \
    mkdir build && cd build && \
    cmake .. && \
    make -j `nproc` install


# Install YARP
RUN cd $SOURCE_FOLDER && \
    git clone https://github.com/robotology/yarp.git &&\
    cd yarp && \
    git checkout v$YARP_VERSION && \
    mkdir build && cd build && \
    cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DYARP_COMPILE_BINDINGS=OFF \
          -DCREATE_PYTHON=OFF \
          .. && \
    make -j `nproc` install

RUN yarp check
EXPOSE 10000/tcp 10000/udp

# Some QT-Apps don't show controls without this
ENV QT_X11_NO_MITSHM 1



# install e2vid dependencies
#RUN apt-get install -y python3-setuptools && \
#    pip3 install torch==1.9.1 torchvision==0.10.1 && \
#    apt -y install python3-pandas && \
#    pip3 install scipy -U && \
#    apt -y install python3-opencv
RUN python3 -m pip install --upgrade pip
RUN python3 -m pip install torch==1.9.1 torchvision==0.10.1
RUN python3 -m pip install pandas
RUN python3 -m pip install scipy opencv-python

#ENV PYTHONHOME=/root/anaconda/bin
#ENV PYTHONPATH=/root/anaconda/lib:/root/anaconda/lib/python3.8:/root/anaconda/lib/python3.8/site-packages
#ENV PATH=$PYTHONHOME:$PATH

# download e2vid
RUN cd $SOURCE_FOLDER && \
    mkdir e2vid && cd e2vid && mkdir python && cd python && \
    git clone git@github.com:uzh-rpg/rpg_e2vid.git && \

    # fix e2vid incompatibility with recent pytorch versions (https://github.com/uzh-rpg/rpg_e2vid/issues/5) \
    cd rpg_e2vid && \
    sed -ie 's/index=xs[valid_indices]/index=(xs[valid_indices]/g' utils/inference_utils.py && \
    sed -ie 's/tis_long[valid_indices] * width * height/tis_long[valid_indices] * width * height).type(torch.cuda.LongTensor)/g' utils/inference_utils.py && \
    sed -ie 's/tis_long[valid_indices] + 1) * width * height/tis_long[valid_indices] + 1) * width * height).type(torch.cuda.LongTensor)/g' utils/inference_utils.py && \

    # download e2vid pretrained model
    wget "http://rpg.ifi.uzh.ch/data/E2VID/models/E2VID_lightweight.pth.tar" -O pretrained/E2VID_lightweight.pth.tar

# define a system variable with e2vid's location; it will be used by the C++ wrapper
ENV E2VID_PYTHON_DIR $SOURCE_FOLDER/e2vid/python

# make e2vid scripts visible to python interpreter
ENV PYTHONPATH $SOURCE_FOLDER/e2vid/python:$SOURCE_FOLDER/e2vid/python/rpg_e2vid
