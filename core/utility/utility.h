//TODO license

#pragma once

#include <array>
#include <iostream>
#include <map>
#include <string>
#include <tuple>
#include <vector>

namespace hpecore {
using skeleton = std::vector<std::tuple<double, double>>;

typedef struct {
    float u;
    float v;
} joint ;

typedef std::array<joint, 13> sklt;
enum skltJoint {head, shoulderR, shoulderL, elbowR, elbowL,
             hipL, hipR, handR, handL, kneeR, kneeL, footR, footL};

inline skltJoint str2enum(const std::string& str)
{
    if(str == "head") return head;
    else if(str == "shoulderR") return shoulderR;
    else if(str == "shoulderL") return shoulderL;
    else if(str == "elbowR") return elbowR;
    else if(str == "elbowL") return elbowL;
    else if(str == "hipL") return hipL;
    else if(str == "hipR") return hipR;
    else if(str == "handR") return handR;
    else if(str == "handL") return handL;
    else if(str == "kneeR") return kneeR;
    else if(str == "kneeL") return kneeL;
    else if(str == "footR") return footR;
    else if(str == "footL") return footL;
}

//// mapping between DHP19 joints and indices of joints generated by openpose using the COCO_18 body model
//std::map<std::string, int> DHP19_TO_COCO_18_INDICES;
//DHP19_TO_COCO_18_INDICES["head"]=0;  // no head in coco, use nose
//DHP19_TO_COCO_18_INDICES["shoulderR"]=2;
//DHP19_TO_COCO_18_INDICES["shoulderL"]=5;
//DHP19_TO_COCO_18_INDICES["elbowR"]=3;
//DHP19_TO_COCO_18_INDICES["elbowL"]=6;
//DHP19_TO_COCO_18_INDICES["hipL"]=11;
//DHP19_TO_COCO_18_INDICES["hipR"]=8;
//DHP19_TO_COCO_18_INDICES["handR"]=4;  // no right hand in coco, use right wrist
//DHP19_TO_COCO_18_INDICES["handL"]=7;  // no left hand in coco, use left wrist
//DHP19_TO_COCO_18_INDICES["kneeR"]=9;
//DHP19_TO_COCO_18_INDICES["kneeL"]=12;
//DHP19_TO_COCO_18_INDICES["footR"]=10;  // no right foot in coco, use right ankle
//DHP19_TO_COCO_18_INDICES["footL"]=13;  // no left foot in coco, use left ankle

// mapping between DHP19 joints and indices of joints generated by openpose using the COCO_18 body model
enum DHP19_TO_COCO_18_INDICES {
    head_=0,  // no head in coco, use nose
    shoulderR_=2,
    shoulderL_=5,
    elbowR_=3,
    elbowL_=6,
    hipL_=11,
    hipR_=8,
    handR_=4,  // no right hand in coco, use right wrist
    handL_=7,  // no left hand in coco, use left wrist
    kneeR_=9,
    kneeL_=12,
    footR_=10,  // no right foot in coco, use right ankle
    footL_=13  // no left foot in coco, use left ankle
};

inline void print_skeleton(const skeleton s) 
{
    for(auto &t : s)
        std::cout << std::get<0>(t) << " " << std::get<1>(t) << std::endl;
}

inline void print_sklt(const sklt s) 
{
    for(auto& j : s)
        std::cout << j.u << " " << j.v << std::endl;
}

inline skeleton coco18_to_dhp19(const skeleton skeleton_in)
{
    skeleton skeleton_out;

    skeleton_out.push_back(std::make_tuple(std::get<0>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::head_)), std::get<1>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::head_))));
    skeleton_out.push_back(std::make_tuple(std::get<0>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::shoulderR_)), std::get<1>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::shoulderR_))));
    skeleton_out.push_back(std::make_tuple(std::get<0>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::shoulderL_)), std::get<1>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::shoulderL_))));
    skeleton_out.push_back(std::make_tuple(std::get<0>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::elbowR_)), std::get<1>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::elbowR_))));
    skeleton_out.push_back(std::make_tuple(std::get<0>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::elbowL_)), std::get<1>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::elbowL_))));
    skeleton_out.push_back(std::make_tuple(std::get<0>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::hipL_)), std::get<1>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::hipL_))));
    skeleton_out.push_back(std::make_tuple(std::get<0>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::hipR_)), std::get<1>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::hipR_))));
    skeleton_out.push_back(std::make_tuple(std::get<0>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::handR_)), std::get<1>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::handR_))));
    skeleton_out.push_back(std::make_tuple(std::get<0>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::handL_)), std::get<1>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::handL_))));
    skeleton_out.push_back(std::make_tuple(std::get<0>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::kneeR_)), std::get<1>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::kneeR_))));
    skeleton_out.push_back(std::make_tuple(std::get<0>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::kneeL_)), std::get<1>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::kneeL_))));
    skeleton_out.push_back(std::make_tuple(std::get<0>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::footR_)), std::get<1>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::footR_))));
    skeleton_out.push_back(std::make_tuple(std::get<0>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::footL_)), std::get<1>(skeleton_out.at(DHP19_TO_COCO_18_INDICES::footL_))));

    return skeleton_out;
}

}