/* BSD 3-Clause License

Copyright (c) 2021, Event Driven Perception for Robotics
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

#pragma once

#include <array>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>
#include <deque>
#include <thread>
#include <chrono>
#include <mutex>
#include <string>
#include <opencv2/opencv.hpp>
#include <fstream>

namespace hpecore {

typedef struct pixel_event
{
    int p:1;
    int x:10;
    int _f1:1;
    int y:9;
    int _f:11;
    int stamp:32;
} pixel_event;

typedef struct point_flow
{
    float udot;
    float vdot;
} point_flow;

struct joint {
    float u;
    float v;
    joint operator * (float k) {
        return {u*k, v*k};
    }
    joint& operator += (const joint k) {
        u+=k.u; v+= k.v;
        return *this;
    }
    joint operator + (const joint k) {
        return {u+k.u, v+k.v};
    } 
};
using jDot = joint;

typedef std::array<joint, 13> skeleton13;
typedef std::array<bool, 13>  skeleton13_b;
typedef std::array<cv::Point, 13> skeleton13_v;
typedef std::array<jDot, 13> skeleton13_vel;

struct stampedPose {
    double timestamp;
    double delay;
    skeleton13 pose;
};

enum jointName {head, shoulderR, shoulderL, elbowR, elbowL,
             hipL, hipR, handR, handL, kneeR, kneeL, footR, footL};
static const std::vector<jointName> jointNames = {head, shoulderR, shoulderL, elbowR, elbowL,
                        hipL, hipR, handR, handL, kneeR, kneeL, footR, footL};

typedef std::array<joint, 18> skeleton18;
typedef std::array<joint, 25> skeleton25;


inline skeleton13_b jointTest(skeleton13 pose)
{
    int i = 0;
    skeleton13_b result;
    for(auto &j : pose) 
    {
        if(j.u > 0.0f || j.v > 0.0f)
            result[i++] = true;
        else
            result[i++] = false;
    }
    return result;
}

inline skeleton13_v jointConvert(skeleton13 pose)
{
    skeleton13_v result;
    for(size_t i = 0; i < pose.size(); i++) 
    {
        result[i].x = pose[i].u;
        result[i].y = pose[i].v;
    }
    return result;
}

template <typename T>
inline void print_skeleton(const T &s) 
{
    for(auto &t : s)
        std::cout << t.u << " " << t.v << std::endl;
}

inline bool poseNonZero(skeleton13 pose)
{
    bool nonZero = false;
    for (int j = 0; j < 13; j++)
    {
        if(pose[j].u || pose[j].v)
        {
            nonZero = true;
            break;
        }
    }
    return nonZero;
}

template <typename T>
inline void getEventsUV(std::deque<T> &input, std::deque<joint> &output, std::deque<double> &ts, double scaler) 
{
    for (auto &q : input)
    {
        joint j = {q.x, q.y};
        output.push_back(j);
        ts.push_back(q.stamp*scaler);
    }
}

inline jointName str2enum(const std::string& str)
{
    if(str == "head") return head;
    else if(str == "shoulderR") return shoulderR;
    else if(str == "shoulderL") return shoulderL;
    else if(str == "elbowR") return elbowR;
    else if(str == "elbowL") return elbowL;
    else if(str == "hipL") return hipL;
    else if(str == "hipR") return hipR;
    else if(str == "handR") return handR;
    else if(str == "handL") return handL;
    else if(str == "kneeR") return kneeR;
    else if(str == "kneeL") return kneeL;
    else if(str == "footR") return footR;
    else if(str == "footL") return footL;
}

// mapping between DHP19 joints and indices of joints generated by openpose using the COCO body model
namespace coco {
enum jointName {head=0, shoulderR=2, shoulderL=5, elbowR=3, elbowL=6, hipL=11, hipR=8,
        handR=4, handL=7, kneeR=9, kneeL=12, footR=10, footL=13};
}

namespace body {
enum jointName {head=0, shoulderR=2, shoulderL=5, elbowR=3, elbowL=6, hipL=12, hipR=9,
        handR=4, handL=7, kneeR=10, kneeL=13, footR=11, footL=14};
}

inline skeleton13 coco18_to_dhp19(const skeleton18 skeleton_in)
{
    skeleton13 skeleton_out;
    skeleton_out[head] = skeleton_in[coco::head];
    skeleton_out[shoulderR] = skeleton_in[coco::shoulderR];
    skeleton_out[shoulderL] = skeleton_in[coco::shoulderL];
    skeleton_out[elbowL] = skeleton_in[coco::elbowL];
    skeleton_out[elbowR] = skeleton_in[coco::elbowR];
    skeleton_out[hipL] = skeleton_in[coco::hipL];
    skeleton_out[hipR] = skeleton_in[coco::hipR];
    skeleton_out[handL] = skeleton_in[coco::handL];
    skeleton_out[handR] = skeleton_in[coco::handR];
    skeleton_out[kneeL] = skeleton_in[coco::kneeL];
    skeleton_out[kneeR] = skeleton_in[coco::kneeR];
    skeleton_out[footL] = skeleton_in[coco::footL];
    skeleton_out[footR] = skeleton_in[coco::footR];
    return skeleton_out;
}

inline skeleton13 body25_to_dhp19(const skeleton25 skeleton_in)
{
    skeleton13 skeleton_out;
    skeleton_out[head] = skeleton_in[body::head];
    skeleton_out[shoulderR] = skeleton_in[body::shoulderR];
    skeleton_out[shoulderL] = skeleton_in[body::shoulderL];
    skeleton_out[elbowL] = skeleton_in[body::elbowL];
    skeleton_out[elbowR] = skeleton_in[body::elbowR];
    skeleton_out[hipL] = skeleton_in[body::hipL];
    skeleton_out[hipR] = skeleton_in[body::hipR];
    skeleton_out[handL] = skeleton_in[body::handL];
    skeleton_out[handR] = skeleton_in[body::handR];
    skeleton_out[kneeL] = skeleton_in[body::kneeL];
    skeleton_out[kneeR] = skeleton_in[body::kneeR];
    skeleton_out[footL] = skeleton_in[body::footL];
    skeleton_out[footR] = skeleton_in[body::footR];
    return skeleton_out;
}

inline void drawSkeleton(cv::Mat &image, const skeleton13 pose, std::array<int, 3> color = {0, 0, 200}, int th =1) 
{
    skeleton13_b jb = jointTest(pose);
    skeleton13_v jv = jointConvert(pose);
    auto colorS = CV_RGB(color[0], color[1], color[2]);

    // plot detected joints
    for (size_t i = 1; i < pose.size(); i++)
        if (jb[i])
            cv::drawMarker(image, jv[i], colorS, cv::MARKER_TILTED_CROSS, 8);

    // if(jb[head]) cv::circle(image, jv[head]+ cv::Point(0, 10), 10, colorS, th);
    // if(jb[head] && jb[shoulderL] && jb[shoulderR]) cv::line(image, (jv[shoulderL] + jv[shoulderR])/2, jv[head] + cv::Point(0, 20), colorS, th);
    if(jb[head] && jb[shoulderL] && jb[shoulderR])
    {
        int dist = cv::norm(jv[shoulderL]-jv[hipR])/6;
        cv::circle(image, jv[head] + cv::Point(0, 0.0), dist, colorS, th);
        cv::line(image, (jv[shoulderL] + jv[shoulderR])/2, jv[head] + cv::Point(0, dist), colorS, th);
    } 
    if(jb[shoulderL] && jb[shoulderR]) cv::line(image, jv[shoulderL], jv[shoulderR], colorS, th);
    if(jb[shoulderL] && jb[elbowL]) cv::line(image, jv[shoulderL], jv[elbowL], colorS, th);
    if(jb[shoulderR] && jb[elbowR]) cv::line(image, jv[shoulderR], jv[elbowR], colorS, th);
    if(jb[elbowL] && jb[handL]) cv::line(image, jv[elbowL], jv[handL], colorS, th);
    if(jb[elbowR] && jb[handR]) cv::line(image, jv[elbowR], jv[handR], colorS, th);
    if(jb[shoulderL] && jb[hipL]) cv::line(image, jv[shoulderL], jv[hipL], colorS, th);
    if(jb[shoulderR] && jb[hipR]) cv::line(image, jv[shoulderR], jv[hipR], colorS, th);
    if(jb[hipL] && jb[hipR]) cv::line(image, jv[hipL], jv[hipR], colorS, th);
    if(jb[hipL] && jb[kneeL]) cv::line(image, jv[hipL], jv[kneeL], colorS, th);
    if(jb[hipR] && jb[kneeR]) cv::line(image, jv[hipR], jv[kneeR], colorS, th);
    if(jb[kneeL] && jb[footL]) cv::line(image, jv[kneeL], jv[footL], colorS, th);
    if(jb[kneeR] && jb[footR]) cv::line(image, jv[kneeR], jv[footR], colorS, th);
}


inline void drawVel(cv::Mat &image, const skeleton13 pose, const skeleton13_vel vel, std::array<int, 3> color = {0, 0, 200}, int th =1) 
{
    skeleton13_b jb = jointTest(pose);
    skeleton13_v jv = jointConvert(pose);
    skeleton13_v jvel = jointConvert(vel);
    auto colorS = CV_RGB(color[0], color[1], color[2]);

    // plot detected joints
    for (size_t i = 0; i < pose.size(); i++)
        if (jb[i])
            cv::arrowedLine(image, jv[i], jv[i]+jvel[i], colorS, th);

}
inline void HSVtoRGB(float H, float S,float V, int &R, int &G, int &B){
    // if(H>360 || H<0 || S>100 || S<0 || V>100 || V<0){
    //     cout<<"The givem HSV values are not in valid range"<<endl;
    //     return;
    // }
    float s = S/100;
    float v = V/100;
    float C = s*v;
    float X = C*(1-abs(fmod(H/60.0, 2)-1));
    float m = v-C;
    float r,g,b;
    if(H >= 0 && H < 60){
        r = C,g = X,b = 0;
    }
    else if(H >= 60 && H < 120){
        r = X,g = C,b = 0;
    }
    else if(H >= 120 && H < 180){
        r = 0,g = C,b = X;
    }
    else if(H >= 180 && H < 240){
        r = 0,g = X,b = C;
    }
    else if(H >= 240 && H < 300){
        r = X,g = 0,b = C;
    }
    else{
        r = C,g = 0,b = X;
    }
    R = (r+m)*255;
    G = (g+m)*255;
    B = (b+m)*255;
}

inline void drawGrid(cv::Mat &image, std::vector<joint> &grid, int rows, int cols, std::array<int, 3> color = {0, 0, 200}, int th =1, bool showGrid = false, double delta = 1.0) 
{
    int width = image.cols/cols;
    int height = image.rows/rows;
    //auto colorS = CV_RGB(color[0], color[1], color[2]);

    if(showGrid)
    {
        for(int i=0; i<=image.rows; i+=height)// draw horizontal lines
            cv::line(image, cv::Point{0, i}, cv::Point{image.cols, i}, {50, 50, 50}, th);
        
        for(int j=0; j<=image.cols; j+=width)// draw vertical lines
            cv::line(image, cv::Point{j, 0}, cv::Point{j, image.rows}, {50, 50, 50}, th);
    }
    // draw velocity arrows
    for(int j=0; j<cols; j++)
    {
        for(int i=0; i<rows; i++)
        {
            if(fabs(grid[i*cols+j].u)>delta && fabs(grid[i*cols+j].v)>delta)
            {
                //cv::Point2d c = cv::Point2d{j*width+width/2, i*height+height/2};
                cv::Point2d v = cv::Point2d{grid[i*cols+j].v, grid[i*cols+j].u};
                // * draw arrows of the same color
                // cv::arrowedLine(image, c, c+v, colorS, th);
                // * draw arrows of different colors
                // double mag = sqrt(v.x*v.x + v.y*v.y);
                // double ang = (atan2(v.y, v.x) + M_PI) * 180.0 / M_PI_2;
                // int R,G,B;
                // HSVtoRGB(ang,mag,(255 * mag / 100),R, G, B);
                // cv::arrowedLine(image, c, c+v, {B, G, R}, th);
                // * draw noralized arrows of different colors
                
                double mag = sqrt(v.x*v.x + v.y*v.y);
                double ang = (atan2(v.y, v.x) + M_PI) * 180.0 / M_PI_2;
                int R=0,G=0,B=0;
                v.x /= mag;
                v.y /= mag;
                v.x *= 10;
                v.y *= 10;
                // HSVtoRGB(ang,mag,(255 * mag / 100),R, G, B);
                HSVtoRGB(ang,(255 * mag / 100),(255 * mag / 100),R, G, B);
                // HSVtoRGB(ang,250,250,R, G, B);
                // HSVtoRGB(ang,255,(255 * mag / 100),R, G, B);
                // cv::arrowedLine(image, c, c+v, cv::Scalar{B, G, R}, th);
                

                // Top Left Corner
                cv::Point p1(j*width, i*height);
            
                // Bottom Right Corner
                cv::Point p2(j*width+width, i*height+height);
            
                int thickness = -1;
            
                // Drawing the Rectangle
                cv::rectangle(image, p1, p2,
                        cv::Scalar{(double)B, (double)G,(double)R},
                        thickness, cv::LINE_8);
            
            
                // cv::arrowedLine(image, c, c+v, colorS, th);
                
                // * color RoI according to vector
                // define the region
                // cv::Rect rect {j*width, j*width+width, i*height, i*height+height };
                // cv::Mat roi { image(rect) };
                // cv::Rect roi_full = cv::Rect(cv::Point(0, 0), image.size());
                // roi.setTo(cv::Scalar{B, G, R});
                // // image(cv::Rect(j*width, j*width+width, i*height, i*height+height)).setTo(cv::Scalar(B, G, R));

                // image =  image(roi & roi_full);

                // // define the region
                // cv::Rect rect { 100, 50, 200, 100 };

                // // here the img object is called with the rectangle
                // cv::Mat roi { img(rect) };

                // // here the img object is called with the rectangle
                // cv::Mat roi { img(rect) };
                // // * set dot colro accoring to vector
                // double mag = sqrt(v.x*v.x + v.y*v.y);
                // double ang = (atan2(v.y, v.x) + M_PI) * 180.0 / M_PI_2;
                // int R,G,B;
                // double vx = v.x, vy=v.y;
                // v.x /= mag;
                // v.y /= mag;
                // v.x *= 10;
                // v.y *= 10;
                // // HSVtoRGB(ang,mag,(255 * mag / 100),R, G, B);
                // HSVtoRGB(ang,255,(255 * mag / 100),R, G, B);
                // // cv::arrowedLine(image, c, c+v, cv::Scalar{B, G, R}, th);
                // image.at<cv::Vec3b>(c) = cv::Vec3b(B, G, R);

                /* from E-RAFT paper
                def visualize_optical_flow(flow, savepath=None, return_image=False, text=None, scaling=None):
                    # flow -> numpy array 2 x height x width
                    # 2,h,w -> h,w,2
                    flow = flow.transpose(1,2,0)
                    flow[numpy.isinf(flow)]=0
                    # Use Hue, Saturation, Value colour model
                    hsv = numpy.zeros((flow.shape[0], flow.shape[1], 3), dtype=float)

                    # The additional **0.5 is a scaling factor
                    mag = numpy.sqrt(flow[...,0]**2+flow[...,1]**2)**0.5

                    ang = numpy.arctan2(flow[...,1], flow[...,0])
                    ang[ang<0]+=numpy.pi*2
                    hsv[..., 0] = ang/numpy.pi/2.0 # Scale from 0..1
                    hsv[..., 1] = 1
                    if scaling is None:
                        hsv[..., 2] = (mag-mag.min())/(mag-mag.min()).max() # Scale from 0..1
                    else:
                        mag[mag>scaling]=scaling
                        hsv[...,2] = mag/scaling
                    rgb = colors.hsv_to_rgb(hsv)
                    # This all seems like an overkill, but it's just to exactly match the cv2 implementation
                    bgr = numpy.stack([rgb[...,2],rgb[...,1],rgb[...,0]], axis=2)
                */
            }
        }
    }
}

template <typename T>
inline skeleton13 extractSkeletonFromYARP(const T &gt_container)
{
    skeleton13 result;
    T *gt = gt_container.get(1).asList();
    if(!gt || gt->size() != result.size()*2) return result;
    for (auto i = 0; i < result.size(); i++) {
        joint &j = result[i];
        j.u = gt->get(i*2).asFloat64();
        j.v = gt->get(i*2+1).asFloat64();
    }
    return result;
}

class writer {
private:

    std::ofstream fileio;
    std::thread th;
    bool stop{false};

    std::mutex m;
    std::deque<stampedPose> buffers[2];
    int b_sel{0};
    static constexpr void switch_buffer(int &buf_i) {buf_i = (buf_i + 1) % 2;};

    void run()
    {
        while(!stop || buffers[0].size() || buffers[1].size()) {

            std::deque<stampedPose> &c_buf = buffers[b_sel];
            m.lock();
            int n_data = buffers[b_sel].size();
            switch_buffer(b_sel);
            m.unlock();

            if(n_data) {
            
                // write the full_buffer and clear it
                for(auto &i : c_buf) 
                {
                    fileio << std::setprecision(5) << std::fixed;
                    fileio << i.timestamp << " " << std::scientific << i.delay << std::fixed;
                    for(auto &j : i.pose)
                        fileio << std::setprecision(2) << " " << j.u << " " << j.v;
                    fileio << std::endl;
                }
                c_buf.clear();

            } else {
                std::this_thread::sleep_for(std::chrono::milliseconds(100));
            }

        }
    }

public:

    bool open(std::string pathname)
    {
        //open the file output
        fileio.open(pathname);
        if(!fileio.is_open()) 
            return false;
        fileio << std::fixed;

        //start the thread
        th = std::thread( [this]{this->run();} );
        return true;
    }

    void write(stampedPose data_point)
    {
        m.lock();
        buffers[b_sel].push_back(data_point);
        m.unlock();
    }

    void close()
    {
        stop = true;
        if(fileio.is_open()) {
            std::cout << "hpecore::writer: please wait...";
            th.join();
            fileio.close();
            std::cout << "complete." << std::endl;
        }
    }
};


inline void drawProgressBar(cv::Mat &image, double percentage)
{
    int width = image.cols;
    cv::Rect box_border(width * 0.05, width * 0.05, width * 0.9, width * 0.05);
    cv::Rect box_prog(width * 0.05, width * 0.05, width * 0.9 * percentage, width * 0.05);
    cv::rectangle(image, box_prog, CV_RGB(255, 255, 255), cv::FILLED);
    cv::rectangle(image, box_border, CV_RGB(0, 0, 0), 2);
}

}