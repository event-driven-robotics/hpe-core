core
    utility
        utility
            point: [u,v] (or maybe [x,y]) location coordnates in 2D
            // point/coord/vect2d/... = joint (?)
            getEventsUV(std::deque<T> &input, std::deque<joint> &output, std::deque<double> &ts, double scaler); // events -> deques (xy coords and timestamps, remove polarity)
    motion estimation
        jointMotionEstimator\roiMotionEstimation
            hpecore point resetPose(hpecore point detection); // set pose to a given detection value
            hpecore point resetVel(); // set velocities to [0, 0]
            hpecore point estimateVelocity(std::deque<joint> evs, std::deque<double> evsTs, int nevs); // meethod 2: use batch of events (of which nevs are new ones) to esimate the velocity of the roi
        skeletonMotionEstimator
            hpecore sklt resetPose(hpecore sklt);
            hpecore sklt resetVel();
            estimateVelocity(std::deque<joint> evs, std::deque<double> evsTs, int nevs)

examples
    joint_tracking/roi_tracking
    skeleton_tracking