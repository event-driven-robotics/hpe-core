
import numpy as np
from . import constants as dhp19_const
# import constants as dhp19_const

# map from body parts to indices for dhp19
DHP19_BODY_PARTS = {
    'head': 0,
    'shoulderR': 1,
    'shoulderL': 2,
    'elbowR': 3,
    'elbowL': 4,
    'hipL': 5,
    'hipR': 6,
    'handR': 7,
    'handL': 8,
    'kneeR': 9,
    'kneeL': 10,
    'footR': 11,
    'footL': 12
}

OPENPOSE_BODY_25_TO_DHP19_INDICES = np.array([
    # TODO: compute head
    [0, DHP19_BODY_PARTS['head']],
    [2, DHP19_BODY_PARTS['shoulderR']],
    [5, DHP19_BODY_PARTS['shoulderL']],
    [3, DHP19_BODY_PARTS['elbowR']],
    [6, DHP19_BODY_PARTS['elbowL']],
    [12, DHP19_BODY_PARTS['hipL']],
    [9, DHP19_BODY_PARTS['hipR']],
    [4, DHP19_BODY_PARTS['handR']],
    [7, DHP19_BODY_PARTS['handL']],
    [10, DHP19_BODY_PARTS['kneeR']],
    [13, DHP19_BODY_PARTS['kneeL']],
    [11, DHP19_BODY_PARTS['footR']],
    [14, DHP19_BODY_PARTS['footL']]
])


def extract_3d_poses(data_dvs, data_vicon, window_size):
    """
    Extracts a 3d pose for each window of events.
    For each window of events generated by the specified camera, the matching Vicon poses are selected and averaged
    to create a single pose for each window. The matching of events and poses is based on timestamps.

    Parameters:
        data_dvs (dict): dictionary containing event data from all cameras, as generated by the preprocess.m matlab script
        data_vicon (dict): dictionary containing Vicon data, provided by DHP19 dataset
        window_size (int): maximum number of events per window (DHP19 default is 7500)
    Returns:
        a numpy array with shape (num_of_windows, num_of_dhp19_joints, 3) containing the 3d poses
    """

    start_time = data_dvs['out']['extra']['startTime']
    timestamps = data_dvs['out']['extra']['ts']

    ##################################################################
    # for every window of events, compute the corresponding 2d pose by
    # - averaging all the 3d poses with matching timestamps
    # - projecting the average 3d pose to 2d
    ##################################################################

    window_size *= dhp19_const.DHP19_CAM_NUM

    # compute average 3d poses
    windows_num = int(np.ceil(len(timestamps) / window_size))
    avg_poses_3d = np.zeros(shape=(windows_num, len(DHP19_BODY_PARTS), 3))
    ts = np.zeros(shape=(windows_num))
    start_ts_ind = 0
    curr_window_ind = 0
    while True:

        end_ts_ind = start_ts_ind + window_size
        window_timestamps = timestamps[start_ts_ind:end_ts_ind]

        # get indices of the 3d poses inside the window
        poses_start_ind = int(np.floor((window_timestamps[0] - start_time) * 1e-4))  # + 1
        poses_end_ind = int(np.floor((window_timestamps[-1] - start_time) * 1e-4))  # + 1

        # TODO: what if there are no poses?
        # find closest ones...

        # compute the average 3d pose
        for body_part in DHP19_BODY_PARTS:
            coords = data_vicon['XYZPOS'][body_part][poses_start_ind:poses_end_ind, :]
            avg_poses_3d[curr_window_ind, DHP19_BODY_PARTS[body_part], :] = np.nanmean(coords, axis=0)
        ts[curr_window_ind] = (window_timestamps[-1] - start_time) * 1e-6
        curr_window_ind += 1

        if end_ts_ind >= timestamps.shape[0]:
            break
        else:
            start_ts_ind = end_ts_ind

    return avg_poses_3d, ts


def get_projection_matrix(cam_id, mat_folder):

    if cam_id == 1:
        file_name = 'P1.npy'
    elif cam_id == 3:
        file_name = 'P2.npy'
    elif cam_id == 2:
        file_name = 'P3.npy'
    elif cam_id == 0:
        file_name = 'P4.npy'

    return np.load(str(mat_folder / file_name))


def openpose_to_dhp19(pose_op):
    # TODO: compute dhp19's head joints from openpose
    return pose_op[OPENPOSE_BODY_25_TO_DHP19_INDICES[:, 0], :]


def project_poses_to_2d(poses_3d, projection_mat):
    """
    Projects 3d poses to a 2d plane using a projection matrix.

    Parameters:
        poses_3d (numpy array): array with shape (num_of_poses, num_of_dhp19_joints, 3) containing the input poses
        projection_mat (numpy array): array with shape (4, 3) containing the projection matrix
    Returns:
        a numpy array with shape (num_of_poses, num_of_dhp19_joints, 2) containing the projected poses
    """

    # use homogeneous coordinates representation to project 3d XYZ coordinates to 2d UV pixel coordinates
    vicon_xyz_homog = np.concatenate([poses_3d, np.ones([len(poses_3d), 13, 1])], axis=2)
    coord_pix_homog = np.matmul(vicon_xyz_homog, projection_mat)
    coord_pix_homog_norm = coord_pix_homog / np.reshape(coord_pix_homog[:, :, -1], (len(poses_3d), 13, 1))

    u = coord_pix_homog_norm[:, :, 0]
    v = dhp19_const.DHP19_SENSOR_HEIGHT - coord_pix_homog_norm[:, :, 1]  # flip v coordinate to match the image direction

    # TODO: use mask to select joints inside frame

    # mask is used to make sure that pixel positions are in frame range
    mask = np.ones(u.shape).astype(np.float32)
    mask[np.isnan(u)] = 0
    mask[np.isnan(v)] = 0
    mask[u > dhp19_const.DHP19_SENSOR_WIDTH] = 0
    mask[u <= 0] = 0
    mask[v > dhp19_const.DHP19_SENSOR_HEIGHT] = 0
    mask[v <= 0] = 0

    # pixel coordinates
    u = u.astype(np.int32)
    v = v.astype(np.int32)
    return np.stack((v, u), axis=-1), mask


class Dhp19EventsIterator:

    # TODO: add param for overlapping?
    # def __init__(self, data, cam_id, window_size=DHP19_FRAME_EVENTS_NUM, stride=None):
    def __init__(self, data, cam_id, window_size=dhp19_const.DHP19_CAM_FRAME_EVENTS_NUM):

        self.timestamps = data['out']['extra']['ts']  # array containing timestamps of events from all cameras

        self.events = data['out']['data'][f'cam{cam_id}']['dvs']  # events specific to selected camera

        # events location indices follow matlab indexing convention, i.e. they start from 1 instead of 0
        self.events['x'] = self.events['x'] - 1
        self.events['y'] = self.events['y'] - 1

        # events x indices are shifted by sensor_width * camera id
        self.events['x'] = self.events['x'] - dhp19_const.DHP19_SENSOR_WIDTH * cam_id

        # events are sampled from all cameras, thus the actual window size is the desired input one (representing the
        # desired number of frames from a single camera) multiplied by the number of cameras (for an explanation, see
        # Section 4.1 of paper "DHP19: Dynamic Vision Sensor 3D Human Pose Dataset")
        self.window_size = window_size * dhp19_const.DHP19_CAM_NUM

        self.curr_ind = 0

    def __iter__(self):
        return self

    def __len__(self):
        return int(np.ceil(len(self.timestamps) / self.window_size))

    def __next__(self):
        if self.curr_ind == -1:
            raise StopIteration

        end_ind = self.curr_ind + self.window_size

        # select events from the specified camera with timestamps within the current window
        window_timestamps = self.timestamps[self.curr_ind:end_ind]
        event_indices = np.isin(self.events['ts'], window_timestamps)
        data = np.concatenate((np.reshape(self.events['ts'][event_indices], (-1, 1)),
                               np.reshape(self.events['x'][event_indices], (-1, 1)),
                               np.reshape(self.events['y'][event_indices], (-1, 1)),
                               np.reshape(self.events['pol'][event_indices], (-1, 1))), axis=1, dtype=np.float64)

        if end_ind >= self.timestamps.shape[0]:
            self.curr_ind = -1
        else:
            self.curr_ind = end_ind

        return data
